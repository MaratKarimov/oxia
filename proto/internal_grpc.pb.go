// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalAPIClient is the client API for InternalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalAPIClient interface {
	UpdateStatus(ctx context.Context, in *ClusterStatus, opts ...grpc.CallOption) (*InternalEmpty, error)
	//*
	// Used by followers to attach to the leader. This is a bi-directional stream:
	//  - Leader will send log entries to the follower
	//  - Follower send a stream of updates with the last entry persisted
	Follow(ctx context.Context, opts ...grpc.CallOption) (InternalAPI_FollowClient, error)
}

type internalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalAPIClient(cc grpc.ClientConnInterface) InternalAPIClient {
	return &internalAPIClient{cc}
}

func (c *internalAPIClient) UpdateStatus(ctx context.Context, in *ClusterStatus, opts ...grpc.CallOption) (*InternalEmpty, error) {
	out := new(InternalEmpty)
	err := c.cc.Invoke(ctx, "/proto.InternalAPI/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) Follow(ctx context.Context, opts ...grpc.CallOption) (InternalAPI_FollowClient, error) {
	stream, err := c.cc.NewStream(ctx, &InternalAPI_ServiceDesc.Streams[0], "/proto.InternalAPI/Follow", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalAPIFollowClient{stream}
	return x, nil
}

type InternalAPI_FollowClient interface {
	Send(*ConfirmedEntryRequest) error
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type internalAPIFollowClient struct {
	grpc.ClientStream
}

func (x *internalAPIFollowClient) Send(m *ConfirmedEntryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *internalAPIFollowClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InternalAPIServer is the server API for InternalAPI service.
// All implementations must embed UnimplementedInternalAPIServer
// for forward compatibility
type InternalAPIServer interface {
	UpdateStatus(context.Context, *ClusterStatus) (*InternalEmpty, error)
	//*
	// Used by followers to attach to the leader. This is a bi-directional stream:
	//  - Leader will send log entries to the follower
	//  - Follower send a stream of updates with the last entry persisted
	Follow(InternalAPI_FollowServer) error
	mustEmbedUnimplementedInternalAPIServer()
}

// UnimplementedInternalAPIServer must be embedded to have forward compatible implementations.
type UnimplementedInternalAPIServer struct {
}

func (UnimplementedInternalAPIServer) UpdateStatus(context.Context, *ClusterStatus) (*InternalEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedInternalAPIServer) Follow(InternalAPI_FollowServer) error {
	return status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedInternalAPIServer) mustEmbedUnimplementedInternalAPIServer() {}

// UnsafeInternalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalAPIServer will
// result in compilation errors.
type UnsafeInternalAPIServer interface {
	mustEmbedUnimplementedInternalAPIServer()
}

func RegisterInternalAPIServer(s grpc.ServiceRegistrar, srv InternalAPIServer) {
	s.RegisterService(&InternalAPI_ServiceDesc, srv)
}

func _InternalAPI_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InternalAPI/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).UpdateStatus(ctx, req.(*ClusterStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_Follow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InternalAPIServer).Follow(&internalAPIFollowServer{stream})
}

type InternalAPI_FollowServer interface {
	Send(*LogEntry) error
	Recv() (*ConfirmedEntryRequest, error)
	grpc.ServerStream
}

type internalAPIFollowServer struct {
	grpc.ServerStream
}

func (x *internalAPIFollowServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *internalAPIFollowServer) Recv() (*ConfirmedEntryRequest, error) {
	m := new(ConfirmedEntryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InternalAPI_ServiceDesc is the grpc.ServiceDesc for InternalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InternalAPI",
	HandlerType: (*InternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStatus",
			Handler:    _InternalAPI_UpdateStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Follow",
			Handler:       _InternalAPI_Follow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/internal.proto",
}
