// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientAPIClient is the client API for ClientAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientAPIClient interface {
	//*
	// Return the current shards -> server mapping and all the subsequent updates
	GetShardsAssignments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientAPI_GetShardsAssignmentsClient, error)
	Put(ctx context.Context, in *PutOp, opts ...grpc.CallOption) (*Stat, error)
}

type clientAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewClientAPIClient(cc grpc.ClientConnInterface) ClientAPIClient {
	return &clientAPIClient{cc}
}

func (c *clientAPIClient) GetShardsAssignments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientAPI_GetShardsAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientAPI_ServiceDesc.Streams[0], "/proto.ClientAPI/GetShardsAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientAPIGetShardsAssignmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientAPI_GetShardsAssignmentsClient interface {
	Recv() (*ShardsAssignments, error)
	grpc.ClientStream
}

type clientAPIGetShardsAssignmentsClient struct {
	grpc.ClientStream
}

func (x *clientAPIGetShardsAssignmentsClient) Recv() (*ShardsAssignments, error) {
	m := new(ShardsAssignments)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientAPIClient) Put(ctx context.Context, in *PutOp, opts ...grpc.CallOption) (*Stat, error) {
	out := new(Stat)
	err := c.cc.Invoke(ctx, "/proto.ClientAPI/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAPIServer is the server API for ClientAPI service.
// All implementations must embed UnimplementedClientAPIServer
// for forward compatibility
type ClientAPIServer interface {
	//*
	// Return the current shards -> server mapping and all the subsequent updates
	GetShardsAssignments(*Empty, ClientAPI_GetShardsAssignmentsServer) error
	Put(context.Context, *PutOp) (*Stat, error)
	mustEmbedUnimplementedClientAPIServer()
}

// UnimplementedClientAPIServer must be embedded to have forward compatible implementations.
type UnimplementedClientAPIServer struct {
}

func (UnimplementedClientAPIServer) GetShardsAssignments(*Empty, ClientAPI_GetShardsAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetShardsAssignments not implemented")
}
func (UnimplementedClientAPIServer) Put(context.Context, *PutOp) (*Stat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedClientAPIServer) mustEmbedUnimplementedClientAPIServer() {}

// UnsafeClientAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientAPIServer will
// result in compilation errors.
type UnsafeClientAPIServer interface {
	mustEmbedUnimplementedClientAPIServer()
}

func RegisterClientAPIServer(s grpc.ServiceRegistrar, srv ClientAPIServer) {
	s.RegisterService(&ClientAPI_ServiceDesc, srv)
}

func _ClientAPI_GetShardsAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientAPIServer).GetShardsAssignments(m, &clientAPIGetShardsAssignmentsServer{stream})
}

type ClientAPI_GetShardsAssignmentsServer interface {
	Send(*ShardsAssignments) error
	grpc.ServerStream
}

type clientAPIGetShardsAssignmentsServer struct {
	grpc.ServerStream
}

func (x *clientAPIGetShardsAssignmentsServer) Send(m *ShardsAssignments) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientAPI_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutOp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAPIServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClientAPI/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAPIServer).Put(ctx, req.(*PutOp))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientAPI_ServiceDesc is the grpc.ServiceDesc for ClientAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClientAPI",
	HandlerType: (*ClientAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _ClientAPI_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetShardsAssignments",
			Handler:       _ClientAPI_GetShardsAssignments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/client.proto",
}
